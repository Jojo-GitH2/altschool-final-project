version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  terraform: circleci/terraform@3.2.0
commands:
  install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
jobs:
  init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd terraform-kubernetes/
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd terraform-kubernetes/
            terraform plan -out terraform-apply
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd terraform-kubernetes/
            terraform apply -auto-approve terraform-apply
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform-kubernetes/
            terraform plan -destroy -out terraform-destroy 
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform-kubernetes/
            terraform apply -auto-approve terraform-destroy       
   
  # stop:
  #   docker:
  #     - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: terraform destroy
  #         command: |
  #           cd terraform-kubernetes/
  #           terraform apply -auto-approve terraform-destroy
      
  build-my-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            cd voting-app/vote
            docker build -t $APP .
      - run:
          name: Push to Docker Hub
          command: |
            cd voting-app/vote
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$APP
            docker push $DOCKER_USERNAME/$APP
            
  deploy-my-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            kubectl apply -f voting-app
            kubectl get pods
            kubectl get services
  # delete-all-pods:
  #   description: Delete all pods
  #   steps:
  #     - run:
  #         name: Install kubectl
  #         command: |
  #           curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #           chmod +x ./kubectl
  #           sudo mv ./kubectl /usr/local/bin/kubectl
  #     - run:
  #         name: Configure kubectl
  #         command: |
  #           aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
  #     - run:
  #         name: Delete pods from EKS cluster
  #         command: |
  #            kubectl delete --all pods -n sock-shop
  #            kubectl delete --all services -n sock-shop
  #            kubectl delete --all deployments -n sock-shop
  #            kubectl delete --all pods -n default
  #            kubectl delete --all services -n default
  #            kubectl delete --all deployments -n default
  #         when: on_fail
  sock-shop:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            kubectl create namespace sock-shop
            kubectl apply -f kubernetes-sock-shop
            kubectl get services -n sock-shop

  prometheus:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            kubectl apply -f kubernetes-sock-shop/manifests-monitoring/
            bash setup.sh
            # kubectl delete --all pods -n sock-shop
            # kubectl delete --all services -n sock-shop
            # kubectl delete --all deployments -n sock-shop
            # kubectl delete --all pods -n default
            # kubectl delete --all services -n default
            # kubectl delete --all deployments -n default
      # - delete-all-pods
            
workflows:
  version: 2
  deploy-apps:
    jobs:
        # - init
        # - plan:
        #     requires: [init]
        # - hold-apply:
        #     type: approval
        #     requires: [plan]
        # - apply:
        #     requires: [hold-apply]
        # - plan-destroy:
        #     requires: [apply, sock-shop, prometheus] 
        # - hold-destroy:
        #     type: approval
        #     requires: [plan-destroy]
        # - destroy:
        #     requires: [hold-destroy]  
         - build-my-app
        #     requires: [apply]
         - deploy-my-app:
              requires: [build-my-app]
        #     requires: [apply]
        # - sock-shop:
        #     requires: [apply]
        # - prometheus:
        #     requires: [apply]